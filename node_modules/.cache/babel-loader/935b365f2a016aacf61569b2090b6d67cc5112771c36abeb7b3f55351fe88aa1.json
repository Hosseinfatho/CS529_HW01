{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hossein\\\\2024\\\\Spring\\\\CS529\\\\HW01\\\\CS529_HW01\\\\src\\\\WhiteHatStats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  const margin = 50;\n  const radius = 10;\n  const marginTop = 30;\n  const marginRight = 0;\n  const marginBottom = 30;\n  const marginLeft = 40;\n\n  //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \n  //This other representation could be \n  ///////////////////////////////////////a histogram, a stacked bar chart, etc.\n  //this loop updates when the props.data changes or the window resizes\n  //we can edit it to also use props.brushedState if you want to use linking\n  useEffect(() => {\n    //wait until the data loads\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n\n    //aggregate gun deaths by state\n    const data = props.data.states;\n    ///\n\n    ///\n\n    //get data for each state\n    const plotData = [];\n    for (let state of data) {\n      const dd = drawingDifficulty[state.abreviation];\n      let entry = {\n        'count': state.count,\n        'name': state.state,\n        'easeOfDrawing': dd === undefined ? 5 : dd,\n        'genderRatio': state.male_count / state.count\n      };\n      plotData.push(entry);\n    }\n    console.log(plotData);\n    /////////////////////////////////////////////////////\n    //get transforms for each value into x and y coordinates\n    // let xScale = d3.scaleLinear()\n    //     .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n    //     .range([margin+radius,width-margin-radius]);\n    //////////////////////////////////\n    const xScale = d3.scaleBand().domain(plotData.map(d => d.name)).range([margin.left, width - margin.right]).padding(0.1);\n    /////////////////////////////////\n\n    // let yScale = d3.scaleLinear()\n    //     .domain(d3.extent(plotData,d=>d.count))\n    //     .range([height-margin-radius,margin+radius]);\n    const yScale = d3.scaleLinear().domain([0, d3.max(plotData, d => d.count)]).nice().range([height - margin.bottom, margin.top]);\n\n    //draw a line showing the mean values across the curve\n    //this probably isn't actually regression\n    // const regressionLine = [];\n    //I remove these ten lines to remove middle line\n    // for(let i = 0; i <= 10; i+= 1){\n    //     let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //     let meanY = 0;\n    //     if(pvals.length > 0){\n    //         for(let entry of pvals){\n    //             meanY += entry.count/pvals.length\n    //         }\n    //     }\n    //     let point = [xScale(i),yScale(meanY)]\n    //     regressionLine.push(point)\n    // }\n\n    //scale color by gender ratio for no reason\n    let colorScale = d3.scaleDiverging().domain([0, .51, 1]).range(['red', 'green', 'yellow']);\n\n    //draw the circles for each state\n    // svg.selectAll('.bar').remove();\n    // svg.selectAll('.bar').data(plotData)\n    //     .enter().append('rect')\n    //     .attr('cy',d=> yScale(d.count))\n    //     .attr('cx',d=>xScale(d.easeOfDrawing))\n    //     .attr('fill',d=> colorScale(d.genderRatio))\n    //     .attr('r',5)\n    //     .on('mouseover',(e,d)=>{\n    //         let string = d.name + '</br>'\n    //             + 'Gun Deaths: ' + d.count + '</br>'\n    //             + 'Difficulty Drawing: ' + d.easeOfDrawing;\n    //         props.ToolTip.moveTTipEvent(tTip,e)\n    //         tTip.html(string)\n    //     }).on('mousemove',(e)=>{\n    //         props.ToolTip.moveTTipEvent(tTip,e);\n    //     }).on('mouseout',(e,d)=>{\n    //         props.ToolTip.hideTTip(tTip);\n    //     });\n\n    // //draw the line\n    //                 // svg.selectAll('.regressionLine').remove();\n    //                 // svg.append('path').attr('class','regressionLine')\n    //                 //     .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n    //                 //     .attr('stroke-width',5)\n    //                 //     .attr('stroke','black')\n    //                 //     .attr('fill','none');\n\n    // //change the title\n    // const labelSize = margin/2;\n    // svg.selectAll('text').remove();\n    // svg.append('text')\n    //     .attr('x',width/2)\n    //     .attr('y',labelSize)\n    //     .attr('text-anchor','middle')\n    //     .attr('font-size',labelSize)\n    //     .attr('font-weight','bold')\n    //     .text('How Hard it Is To Draw Each State Vs Gun Deaths');\n\n    // //change the disclaimer here\n    // svg.append('text')\n    //     .attr('x',width+0)\n    //     .attr('y',height/3)\n    //     .attr('text-anchor','end')\n    //     .attr('font-size',20)\n    //     .text(\"Gundeath for states\");\n\n    // //draw basic axes using the x and y scales\n    // svg.selectAll('g').remove()\n    // svg.append('g')\n    //     .attr('transform',`translate(0,${height-margin+1})`)\n    //     .call(d3.axisBottom(xScale))\n\n    // svg.append('g')\n    //     .attr('transform',`translate(${margin-2},0)`)\n    //     .call(d3.axisLeft(yScale))\n    svg.selectAll('.bar').remove();\n    svg.selectAll('.bar').data(plotData).enter().append('rect').attr('class', 'bar').attr('x', d => xScale(d.name)).attr('y', d => yScale(d.count)).attr('width', xScale.bandwidth()).attr('height', d => height - margin.bottom - yScale(d.count)).attr('fill', 'steelblue').on('mouseover', (e, d) => {\n      const string = `${d.name}</br>Gun Deaths: ${d.count}</br>Difficulty Drawing: ${d.easeOfDrawing}`;\n      props.ToolTip.moveTTipEvent(tTip, e);\n      tTip.html(string);\n    }).on('mousemove', e => {\n      props.ToolTip.moveTTipEvent(tTip, e);\n    }).on('mouseout', () => {\n      props.ToolTip.hideTTip(tTip);\n    });\n    svg.selectAll('.axis').remove();\n    svg.append('g').attr('class', 'axis').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale)).selectAll('text').attr('dy', '1em').style('text-anchor', 'middle');\n    svg.append('g').attr('class', 'axis').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale));\n\n    // Change the title\n    const labelSize = margin.top / 2;\n    svg.selectAll('text').remove();\n    svg.append('text').attr('x', width / 2).attr('y', labelSize).attr('text-anchor', 'middle').attr('font-size', labelSize).attr('font-weight', 'bold').text('Gun Deaths by State');\n  }, [props.data, svg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n//END of TODO #1.\n/////////////////////////////////////////////////////////////////////////\n\n//////////////////////\n_s(WhiteHatStats, \"WSxzHn2M6v/mpwTKCm+WLF/lrvI=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = WhiteHatStats;\nconst drawingDifficulty = {\n  'IL': 9,\n  'AL': 2,\n  'AK': 1,\n  'AR': 3,\n  'CA': 9.51,\n  'CO': 0,\n  'DE': 3.1,\n  'DC': 1.3,\n  'FL': 8.9,\n  'GA': 3.9,\n  'HI': 4.5,\n  'ID': 4,\n  'IN': 4.3,\n  'IA': 4.1,\n  'KS': 1.6,\n  'KY': 7,\n  'LA': 6.5,\n  'MN': 2.1,\n  'MO': 5.5,\n  'ME': 7.44,\n  'MD': 10,\n  'MA': 6.8,\n  'MI': 9.7,\n  'MN': 5.1,\n  'MS': 3.8,\n  'MT': 1.4,\n  'NE': 1.9,\n  'NV': .5,\n  'NH': 3.7,\n  'NJ': 9.1,\n  'NM': .2,\n  'NY': 8.7,\n  'NC': 8.5,\n  'ND': 2.3,\n  'OH': 5.8,\n  'OK': 6.05,\n  'OR': 4.7,\n  'PA': 4.01,\n  'RI': 8.4,\n  'SC': 7.1,\n  'SD': .9,\n  'TN': 3.333333,\n  'TX': 8.1,\n  'UT': 2.8,\n  'VT': 2.6,\n  'VA': 8.2,\n  'WA': 9.2,\n  'WV': 7.9,\n  'WY': 0\n};\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","WhiteHatStats","props","_s","d3Container","svg","height","width","tTip","margin","radius","marginTop","marginRight","marginBottom","marginLeft","undefined","data","states","plotData","state","dd","drawingDifficulty","abreviation","entry","count","male_count","push","console","log","xScale","scaleBand","domain","map","d","name","range","left","right","padding","yScale","scaleLinear","max","nice","bottom","top","colorScale","scaleDiverging","selectAll","remove","enter","append","attr","bandwidth","on","e","string","easeOfDrawing","ToolTip","moveTTipEvent","html","hideTTip","call","axisBottom","style","axisLeft","labelSize","text","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Hossein/2024/Spring/CS529/HW01/CS529_HW01/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\r\nimport useSVGCanvas from './useSVGCanvas.js';\r\nimport * as d3 from 'd3';\r\n\r\n\r\n//change the code below to modify the bottom plot view\r\nexport default function WhiteHatStats(props){\r\n    //this is a generic component for plotting a d3 plot\r\n    const d3Container = useRef(null);\r\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\r\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\r\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\r\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\r\n\r\n    const margin = 50;\r\n    const radius = 10;\r\n    const marginTop = 30;\r\n    const marginRight = 0;\r\n    const marginBottom = 30;\r\n    const marginLeft = 40;\r\n\r\n\r\n\r\n    //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \r\n    //This other representation could be \r\n    ///////////////////////////////////////a histogram, a stacked bar chart, etc.\r\n    //this loop updates when the props.data changes or the window resizes\r\n    //we can edit it to also use props.brushedState if you want to use linking\r\n    useEffect(()=>{\r\n        //wait until the data loads\r\n        if(svg === undefined | props.data === undefined){ return }\r\n\r\n        //aggregate gun deaths by state\r\n        const data = props.data.states;\r\n        ///\r\n            \r\n\r\n        ///\r\n\r\n\r\n        //get data for each state\r\n        const plotData = [];\r\n        for(let state of data){\r\n            const dd = drawingDifficulty[state.abreviation];\r\n            let entry = {\r\n                'count': state.count,\r\n                'name': state.state,\r\n                'easeOfDrawing': dd === undefined? 5: dd,\r\n                'genderRatio': state.male_count/state.count,\r\n            }\r\n            plotData.push(entry)\r\n\r\n        }\r\n\r\n        console.log(plotData)\r\n/////////////////////////////////////////////////////\r\n        //get transforms for each value into x and y coordinates\r\n                // let xScale = d3.scaleLinear()\r\n                //     .domain(d3.extent(plotData,d=>d.easeOfDrawing))\r\n                //     .range([margin+radius,width-margin-radius]);\r\n//////////////////////////////////\r\nconst xScale = d3.scaleBand()\r\n.domain(plotData.map(d => d.name))\r\n.range([margin.left, width - margin.right])\r\n.padding(0.1);\r\n/////////////////////////////////\r\n                \r\n                // let yScale = d3.scaleLinear()\r\n                //     .domain(d3.extent(plotData,d=>d.count))\r\n                //     .range([height-margin-radius,margin+radius]);\r\n                const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(plotData, d => d.count)])\r\n                .nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n        //draw a line showing the mean values across the curve\r\n        //this probably isn't actually regression\r\n                           // const regressionLine = [];\r\n                            //I remove these ten lines to remove middle line\r\n                            // for(let i = 0; i <= 10; i+= 1){\r\n                            //     let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\r\n                            //     let meanY = 0;\r\n                            //     if(pvals.length > 0){\r\n                            //         for(let entry of pvals){\r\n                            //             meanY += entry.count/pvals.length\r\n                            //         }\r\n                            //     }\r\n                            //     let point = [xScale(i),yScale(meanY)]\r\n                            //     regressionLine.push(point)\r\n                            // }\r\n                            \r\n        //scale color by gender ratio for no reason\r\n        let colorScale = d3.scaleDiverging()\r\n            .domain([0,.51,1])\r\n            .range(['red','green','yellow']);\r\n\r\n        //draw the circles for each state\r\n                                        // svg.selectAll('.bar').remove();\r\n                                        // svg.selectAll('.bar').data(plotData)\r\n                                        //     .enter().append('rect')\r\n                                        //     .attr('cy',d=> yScale(d.count))\r\n                                        //     .attr('cx',d=>xScale(d.easeOfDrawing))\r\n                                        //     .attr('fill',d=> colorScale(d.genderRatio))\r\n                                        //     .attr('r',5)\r\n                                        //     .on('mouseover',(e,d)=>{\r\n                                        //         let string = d.name + '</br>'\r\n                                        //             + 'Gun Deaths: ' + d.count + '</br>'\r\n                                        //             + 'Difficulty Drawing: ' + d.easeOfDrawing;\r\n                                        //         props.ToolTip.moveTTipEvent(tTip,e)\r\n                                        //         tTip.html(string)\r\n                                        //     }).on('mousemove',(e)=>{\r\n                                        //         props.ToolTip.moveTTipEvent(tTip,e);\r\n                                        //     }).on('mouseout',(e,d)=>{\r\n                                        //         props.ToolTip.hideTTip(tTip);\r\n                                        //     });\r\n                                        \r\n                                        // //draw the line\r\n                                        //                 // svg.selectAll('.regressionLine').remove();\r\n                                        //                 // svg.append('path').attr('class','regressionLine')\r\n                                        //                 //     .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\r\n                                        //                 //     .attr('stroke-width',5)\r\n                                        //                 //     .attr('stroke','black')\r\n                                        //                 //     .attr('fill','none');\r\n\r\n                                        // //change the title\r\n                                        // const labelSize = margin/2;\r\n                                        // svg.selectAll('text').remove();\r\n                                        // svg.append('text')\r\n                                        //     .attr('x',width/2)\r\n                                        //     .attr('y',labelSize)\r\n                                        //     .attr('text-anchor','middle')\r\n                                        //     .attr('font-size',labelSize)\r\n                                        //     .attr('font-weight','bold')\r\n                                        //     .text('How Hard it Is To Draw Each State Vs Gun Deaths');\r\n\r\n                                        // //change the disclaimer here\r\n                                        // svg.append('text')\r\n                                        //     .attr('x',width+0)\r\n                                        //     .attr('y',height/3)\r\n                                        //     .attr('text-anchor','end')\r\n                                        //     .attr('font-size',20)\r\n                                        //     .text(\"Gundeath for states\");\r\n\r\n                                        // //draw basic axes using the x and y scales\r\n                                        // svg.selectAll('g').remove()\r\n                                        // svg.append('g')\r\n                                        //     .attr('transform',`translate(0,${height-margin+1})`)\r\n                                        //     .call(d3.axisBottom(xScale))\r\n\r\n                                        // svg.append('g')\r\n                                        //     .attr('transform',`translate(${margin-2},0)`)\r\n                                        //     .call(d3.axisLeft(yScale))\r\n                                        svg.selectAll('.bar').remove();\r\n                                        svg.selectAll('.bar')\r\n                                            .data(plotData)\r\n                                            .enter().append('rect')\r\n                                            .attr('class', 'bar')\r\n                                            .attr('x', d => xScale(d.name))\r\n                                            .attr('y', d => yScale(d.count))\r\n                                            .attr('width', xScale.bandwidth())\r\n                                            .attr('height', d => height - margin.bottom - yScale(d.count))\r\n                                            .attr('fill', 'steelblue')\r\n                                            .on('mouseover', (e, d) => {\r\n                                                const string = `${d.name}</br>Gun Deaths: ${d.count}</br>Difficulty Drawing: ${d.easeOfDrawing}`;\r\n                                                props.ToolTip.moveTTipEvent(tTip, e);\r\n                                                tTip.html(string);\r\n                                            })\r\n                                            .on('mousemove', (e) => {\r\n                                                props.ToolTip.moveTTipEvent(tTip, e);\r\n                                            })\r\n                                            .on('mouseout', () => {\r\n                                                props.ToolTip.hideTTip(tTip);\r\n                                            });\r\n                                \r\n                                        svg.selectAll('.axis').remove();\r\n                                        svg.append('g')\r\n                                            .attr('class', 'axis')\r\n                                            .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                                            .call(d3.axisBottom(xScale))\r\n                                            .selectAll('text')\r\n                                            .attr('dy', '1em')\r\n                                            .style('text-anchor', 'middle');\r\n                                \r\n                                        svg.append('g')\r\n                                            .attr('class', 'axis')\r\n                                            .attr('transform', `translate(${margin.left},0)`)\r\n                                            .call(d3.axisLeft(yScale));\r\n                                \r\n                                        // Change the title\r\n                                        const labelSize = margin.top / 2;\r\n                                        svg.selectAll('text').remove();\r\n                                        svg.append('text')\r\n                                            .attr('x', width / 2)\r\n                                            .attr('y', labelSize)\r\n                                            .attr('text-anchor', 'middle')\r\n                                            .attr('font-size', labelSize)\r\n                                            .attr('font-weight', 'bold')\r\n                                            .text('Gun Deaths by State');\r\n                                \r\n        \r\n    },[props.data,svg]);\r\n\r\n    return (\r\n        <div\r\n            className={\"d3-component\"}\r\n            style={{'height':'99%','width':'99%'}}\r\n            ref={d3Container}\r\n        ></div>\r\n    );\r\n}\r\n//END of TODO #1.\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////\r\n \r\nconst drawingDifficulty = {\r\n    'IL': 9,\r\n    'AL': 2,\r\n    'AK': 1,\r\n    'AR': 3,\r\n    'CA': 9.51,\r\n    'CO': 0,\r\n    'DE': 3.1,\r\n    'DC': 1.3,\r\n    'FL': 8.9,\r\n    'GA': 3.9,\r\n    'HI': 4.5,\r\n    'ID': 4,\r\n    'IN': 4.3,\r\n    'IA': 4.1,\r\n    'KS': 1.6,\r\n    'KY': 7,\r\n    'LA': 6.5,\r\n    'MN': 2.1,\r\n    'MO': 5.5,\r\n    'ME': 7.44,\r\n    'MD': 10,\r\n    'MA': 6.8,\r\n    'MI': 9.7,\r\n    'MN': 5.1,\r\n    'MS': 3.8,\r\n    'MT': 1.4,\r\n    'NE': 1.9,\r\n    'NV': .5,\r\n    'NH': 3.7,\r\n    'NJ': 9.1,\r\n    'NM': .2,\r\n    'NY': 8.7,\r\n    'NC': 8.5,\r\n    'ND': 2.3,\r\n    'OH': 5.8,\r\n    'OK': 6.05,\r\n    'OR': 4.7,\r\n    'PA': 4.01,\r\n    'RI': 8.4,\r\n    'SC': 7.1,\r\n    'SD': .9,\r\n    'TN': 3.333333,\r\n    'TX': 8.1,\r\n    'UT': 2.8,\r\n    'VT': 2.6,\r\n    'VA': 8.2,\r\n    'WA': 9.2,\r\n    'WV': 7.9,\r\n    'WY': 0,\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}