{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  //const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n\n  //     const margin = 50;\n  //     const radius = 10;\n  //     const width = 640;\n  //     const height = 400;\n  //     const marginTop = 20;\n  //     const marginRight = 0;\n  //     const marginBottom = 30;\n  //     const marginLeft = 40;\n\n  //     //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \n  //     //This other representation could be \n  //     ///////////////////////////////////////a histogram, a stacked bar chart, etc.\n  //     //this loop updates when the props.data changes or the window resizes\n  //     //we can edit it to also use props.brushedState if you want to use linking\n  //     useEffect(()=>{\n  //         //wait until the data loads\n  //         if(svg === undefined | props.data === undefined){ return }\n\n  //         //aggregate gun deaths by state\n  //                 //////////array[{population, abreviation, state, count, male_count,ids}]\n\n  //         const data = props.data.states;\n  //         console.log(\"Final log\", data);     \n  // ///////////////////////////////        //draw here\n\n  //   // Declare the x (horizontal position) scale and the corresponding axis generator.\n\n  //         const x = d3.scaleBand()\n  //         .domain(data.map(d => d.state))\n\n  //         .range([marginLeft, width - marginRight])\n  //         .padding(0.1);\n  //         const xAxis = d3.axisBottom(x).tickSizeOuter(0);\n\n  //          // Declare the y (vertical position) scale.\n  //   const y = d3.scaleLinear()\n  //   .domain([0, d3.max(data, d => d.count)]).nice()\n  //   .range([height - marginBottom, marginTop]);\n\n  // // Create the SVG container.\n  //         const svg = d3.create(\"svg\")\n  //         .attr(\"viewBox\", [0, 0, width, height])\n  //         .attr(\"style\", `max-width: ${width}px; height: auto; font: 10px sans-serif; overflow: visible;`);\n\n  //             },\n\n  //             //         [props.data,svg]);\n\n  //             // return (\n  //             //     <div\n  //             //         className={\"d3-component\"}\n  //             //         style={{'height':'99%','width':'99%'}}\n  //             //         ref={d3Container}\n  //             //     ></div>\n  //             // );\n  // }\n  // //END of TODO #1.\n  // /////////////////////////////////////////////////////////////////////////\n\n  // //////////////////////\n}\n\n// Specify the chartâ€™s dimensions.\n_s(WhiteHatStats, \"gsrV+PPF+wiXFqwDJY9vB9wEnyU=\");\n_c = WhiteHatStats;\nconst width = 640;\nconst height = 400;\nconst marginTop = 20;\nconst marginRight = 0;\nconst marginBottom = 30;\nconst marginLeft = 40;\n//read state data\nconst stateData = [...props.data.states];\nconst data = props.data.states;\n// Declare the x (horizontal position) scale and the corresponding axis generator.\nconst x = d3.scaleBand().domain(data.map(d => d.state)).range([marginLeft, width - marginRight]).padding(0.1);\nconst xAxis = d3.axisBottom(x).tickSizeOuter(0);\n\n// Declare the y (vertical position) scale.\nconst y = d3.scaleLinear().domain([0, d3.max(data, d => d.count)]).nice().range([height - marginBottom, marginTop]);\n\n// Create the SVG container.\nconst svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, width, height]).attr(\"style\", `max-width: ${width}px; height: auto; font: 10px sans-serif; overflow: visible;`);\n\n// Create a bar for each letter.\nconst bar = svg.append(\"g\").attr(\"fill\", \"steelblue\").selectAll(\"rect\").data(data).join(\"rect\").style(\"mix-blend-mode\", \"multiply\") // Darker color when bars overlap during the transition.\n.attr(\"x\", d => x(d.state)).attr(\"y\", d => y(d.count)).attr(\"height\", d => y(0) - y(d.count)).attr(\"width\", x.bandwidth());\n\n// Create the axes.\nconst gx = svg.append(\"g\").attr(\"transform\", `translate(0,${height - marginBottom})`).call(xAxis);\nconst gy = svg.append(\"g\").attr(\"transform\", `translate(${marginLeft},0)`).call(d3.axisLeft(y).tickFormat(y => (y * 100).toFixed())).call(g => g.select(\".domain\").remove());\n\n// Return the chart, with an update function that takes as input a domain\n// comparator and transitions the x axis and bar positions accordingly. \n//  return Object.assign(svg.node(), {\n//    update(order) {\n//      x.domain(data.sort(order).map(d => d.state));\n\n//      const t = svg.transition()\n//          .duration(750);\n\n//      bar.data(data, d => d.state)\n//          .order()\n//        .transition(t)\n//          .delay((d, i) => i * 20)\n//          .attr(\"x\", d => x(d.state));\n\n//      gx.transition(t)\n//          .call(xAxis)\n//        .selectAll(\".tick\")\n//          .delay((d, i) => i * 20);\n//    }\n//  });\n//}\n\nconst drawingDifficulty = {\n  'IL': 9,\n  'AL': 2,\n  'AK': 1,\n  'AR': 3,\n  'CA': 9.51,\n  'CO': 0,\n  'DE': 3.1,\n  'DC': 1.3,\n  'FL': 8.9,\n  'GA': 3.9,\n  'HI': 4.5,\n  'ID': 4,\n  'IN': 4.3,\n  'IA': 4.1,\n  'KS': 1.6,\n  'KY': 7,\n  'LA': 6.5,\n  'MN': 2.1,\n  'MO': 5.5,\n  'ME': 7.44,\n  'MD': 10,\n  'MA': 6.8,\n  'MI': 9.7,\n  'MN': 5.1,\n  'MS': 3.8,\n  'MT': 1.4,\n  'NE': 1.9,\n  'NV': .5,\n  'NH': 3.7,\n  'NJ': 9.1,\n  'NM': .2,\n  'NY': 8.7,\n  'NC': 8.5,\n  'ND': 2.3,\n  'OH': 5.8,\n  'OK': 6.05,\n  'OR': 4.7,\n  'PA': 4.01,\n  'RI': 8.4,\n  'SC': 7.1,\n  'SD': .9,\n  'TN': 3.333333,\n  'TX': 8.1,\n  'UT': 2.8,\n  'VT': 2.6,\n  'VA': 8.2,\n  'WA': 9.2,\n  'WV': 7.9,\n  'WY': 0\n};\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","WhiteHatStats","props","_s","d3Container","_c","width","height","marginTop","marginRight","marginBottom","marginLeft","stateData","data","states","x","scaleBand","domain","map","d","state","range","padding","xAxis","axisBottom","tickSizeOuter","y","scaleLinear","max","count","nice","svg","create","attr","bar","append","selectAll","join","style","bandwidth","gx","call","gy","axisLeft","tickFormat","toFixed","g","select","remove","drawingDifficulty","$RefreshReg$"],"sources":["D:/Hossein/2024/Spring/CS529/HW01/CS529_HW01/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\r\nimport useSVGCanvas from './useSVGCanvas.js';\r\nimport * as d3 from 'd3';\r\n\r\n//change the code below to modify the bottom plot view\r\nexport default function WhiteHatStats(props){\r\n    //this is a generic component for plotting a d3 plot\r\n    const d3Container = useRef(null);\r\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\r\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\r\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\r\n    //const [svg, height, width, tTip] = useSVGCanvas(d3Container);\r\n\r\n                            //     const margin = 50;\r\n                            //     const radius = 10;\r\n                            //     const width = 640;\r\n                            //     const height = 400;\r\n                            //     const marginTop = 20;\r\n                            //     const marginRight = 0;\r\n                            //     const marginBottom = 30;\r\n                            //     const marginLeft = 40;\r\n\r\n                            //     //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \r\n                            //     //This other representation could be \r\n                            //     ///////////////////////////////////////a histogram, a stacked bar chart, etc.\r\n                            //     //this loop updates when the props.data changes or the window resizes\r\n                            //     //we can edit it to also use props.brushedState if you want to use linking\r\n                            //     useEffect(()=>{\r\n                            //         //wait until the data loads\r\n                            //         if(svg === undefined | props.data === undefined){ return }\r\n\r\n                            //         //aggregate gun deaths by state\r\n                            //                 //////////array[{population, abreviation, state, count, male_count,ids}]\r\n\r\n                            //         const data = props.data.states;\r\n                            //         console.log(\"Final log\", data);     \r\n                            // ///////////////////////////////        //draw here\r\n\r\n                            //   // Declare the x (horizontal position) scale and the corresponding axis generator.\r\n                                \r\n                            //         const x = d3.scaleBand()\r\n                            //         .domain(data.map(d => d.state))\r\n                                    \r\n                            //         .range([marginLeft, width - marginRight])\r\n                            //         .padding(0.1);\r\n                            //         const xAxis = d3.axisBottom(x).tickSizeOuter(0);\r\n\r\n                            //          // Declare the y (vertical position) scale.\r\n                            //   const y = d3.scaleLinear()\r\n                            //   .domain([0, d3.max(data, d => d.count)]).nice()\r\n                            //   .range([height - marginBottom, marginTop]);\r\n\r\n                            // // Create the SVG container.\r\n                            //         const svg = d3.create(\"svg\")\r\n                            //         .attr(\"viewBox\", [0, 0, width, height])\r\n                            //         .attr(\"style\", `max-width: ${width}px; height: auto; font: 10px sans-serif; overflow: visible;`);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            //             },\r\n                                        \r\n                                                \r\n                            //             //         [props.data,svg]);\r\n\r\n                            //             // return (\r\n                            //             //     <div\r\n                            //             //         className={\"d3-component\"}\r\n                            //             //         style={{'height':'99%','width':'99%'}}\r\n                            //             //         ref={d3Container}\r\n                            //             //     ></div>\r\n                            //             // );\r\n                            // }\r\n                            // //END of TODO #1.\r\n                            // /////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n                            // //////////////////////\r\n}\r\n\r\n // Specify the chartâ€™s dimensions.\r\n const width = 640;\r\n const height = 400;\r\n const marginTop = 20;\r\n const marginRight = 0;\r\n const marginBottom = 30;\r\n const marginLeft = 40;\r\n //read state data\r\n const stateData = [...props.data.states];\r\n const data = props.data.states;\r\n // Declare the x (horizontal position) scale and the corresponding axis generator.\r\n const x = d3.scaleBand()\r\n   .domain(data.map(d => d.state))\r\n   \r\n   .range([marginLeft, width - marginRight])\r\n   .padding(0.1);\r\n\r\n const xAxis = d3.axisBottom(x).tickSizeOuter(0);\r\n\r\n // Declare the y (vertical position) scale.\r\n const y = d3.scaleLinear()\r\n   .domain([0, d3.max(data, d => d.count)]).nice()\r\n   .range([height - marginBottom, marginTop]);\r\n\r\n // Create the SVG container.\r\n const svg = d3.create(\"svg\")\r\n     .attr(\"viewBox\", [0, 0, width, height])\r\n     .attr(\"style\", `max-width: ${width}px; height: auto; font: 10px sans-serif; overflow: visible;`);\r\n\r\n // Create a bar for each letter.\r\n const bar = svg.append(\"g\")\r\n     .attr(\"fill\", \"steelblue\")\r\n   .selectAll(\"rect\")\r\n   .data(data)\r\n   .join(\"rect\")\r\n     .style(\"mix-blend-mode\", \"multiply\") // Darker color when bars overlap during the transition.\r\n     .attr(\"x\", d => x(d.state))\r\n     .attr(\"y\", d => y(d.count))\r\n     .attr(\"height\", d => y(0) - y(d.count))\r\n     .attr(\"width\", x.bandwidth());\r\n\r\n // Create the axes.\r\n const gx = svg.append(\"g\")\r\n     .attr(\"transform\", `translate(0,${height - marginBottom})`)\r\n     .call(xAxis);\r\n \r\n const gy = svg.append(\"g\")\r\n     .attr(\"transform\", `translate(${marginLeft},0)`)\r\n     .call(d3.axisLeft(y).tickFormat((y) => (y * 100).toFixed()))\r\n     .call(g => g.select(\".domain\").remove());\r\n\r\n // Return the chart, with an update function that takes as input a domain\r\n // comparator and transitions the x axis and bar positions accordingly. \r\n//  return Object.assign(svg.node(), {\r\n//    update(order) {\r\n//      x.domain(data.sort(order).map(d => d.state));\r\n\r\n//      const t = svg.transition()\r\n//          .duration(750);\r\n\r\n//      bar.data(data, d => d.state)\r\n//          .order()\r\n//        .transition(t)\r\n//          .delay((d, i) => i * 20)\r\n//          .attr(\"x\", d => x(d.state));\r\n\r\n//      gx.transition(t)\r\n//          .call(xAxis)\r\n//        .selectAll(\".tick\")\r\n//          .delay((d, i) => i * 20);\r\n//    }\r\n//  });\r\n//}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst drawingDifficulty = {\r\n    'IL': 9,\r\n    'AL': 2,\r\n    'AK': 1,\r\n    'AR': 3,\r\n    'CA': 9.51,\r\n    'CO': 0,\r\n    'DE': 3.1,\r\n    'DC': 1.3,\r\n    'FL': 8.9,\r\n    'GA': 3.9,\r\n    'HI': 4.5,\r\n    'ID': 4,\r\n    'IN': 4.3,\r\n    'IA': 4.1,\r\n    'KS': 1.6,\r\n    'KY': 7,\r\n    'LA': 6.5,\r\n    'MN': 2.1,\r\n    'MO': 5.5,\r\n    'ME': 7.44,\r\n    'MD': 10,\r\n    'MA': 6.8,\r\n    'MI': 9.7,\r\n    'MN': 5.1,\r\n    'MS': 3.8,\r\n    'MT': 1.4,\r\n    'NE': 1.9,\r\n    'NV': .5,\r\n    'NH': 3.7,\r\n    'NJ': 9.1,\r\n    'NM': .2,\r\n    'NY': 8.7,\r\n    'NC': 8.5,\r\n    'ND': 2.3,\r\n    'OH': 5.8,\r\n    'OK': 6.05,\r\n    'OR': 4.7,\r\n    'PA': 4.01,\r\n    'RI': 8.4,\r\n    'SC': 7.1,\r\n    'SD': .9,\r\n    'TN': 3.333333,\r\n    'TX': 8.1,\r\n    'UT': 2.8,\r\n    'VT': 2.6,\r\n    'VA': 8.2,\r\n    'WA': 9.2,\r\n    'WV': 7.9,\r\n    'WY': 0,\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}