{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hossein\\\\2024\\\\Spring\\\\CS529\\\\HW01\\\\CS529_HW01\\\\src\\\\WhiteHatStats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  const margin = 50;\n  const radius = 10;\n\n  //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \n  //This other representation could be \n  ///////////////////////////////////////a histogram, a stacked bar chart, etc.\n  //this loop updates when the props.data changes or the window resizes\n  //we can edit it to also use props.brushedState if you want to use linking\n  useEffect(() => {\n    //wait until the data loads\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n\n    //aggregate gun deaths by state\n    const data = props.data.states;\n\n    //get data for each state\n    // const plotData = [];\n    // for(let state of data){\n    //     const dd = drawingDifficulty[state.abreviation];\n    //     let entry = {\n    //         'count': state.count,\n    //         'name': state.state,\n    //         'easeOfDrawing': dd === undefined? 5: dd,\n    //         'genderRatio': state.male_count/state.count,\n    //     }\n    //     plotData.push(entry)\n    // }\n    /////////////////////////////////////////////////////\n    const plotData = [];\n    for (let state of data) {\n      plotData.push(state.count); // Assuming state.count represents some quantitative data\n    }\n\n    // Create a histogram using Chart.js\n    var ctx = document.getElementById('myChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: Array.from({\n          length: plotData.length\n        }, (_, i) => i + 1),\n        // Generate labels from 1 to n\n        datasets: [{\n          label: 'Frequency',\n          data: plotData,\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {}\n    });\n    /////////////////////////////////////////////////\n    //get transforms for each value into x and y coordinates\n    let xScale = d3.scaleLinear().domain(d3.extent(plotData, d => d.easeOfDrawing)).range([margin + radius, width - margin - radius]);\n    let yScale = d3.scaleLinear().domain(d3.extent(plotData, d => d.count)).range([height - margin - radius, margin + radius]);\n\n    //draw a line showing the mean values across the curve\n    //this probably isn't actually regression\n    const regressionLine = [];\n    //I remove these ten lines to remove middle line\n    // for(let i = 0; i <= 10; i+= 1){\n    //     let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //     let meanY = 0;\n    //     if(pvals.length > 0){\n    //         for(let entry of pvals){\n    //             meanY += entry.count/pvals.length\n    //         }\n    //     }\n    //     let point = [xScale(i),yScale(meanY)]\n    //     regressionLine.push(point)\n    // }\n\n    //scale color by gender ratio for no reason\n    let colorScale = d3.scaleDiverging().domain([0, .5, 1]).range(['red', 'green', 'yellow']);\n\n    //draw the circles for each state\n    svg.selectAll('.dot').remove();\n    svg.selectAll('.dot').data(plotData).enter().append('circle').attr('cy', d => yScale(d.count)).attr('cx', d => xScale(d.easeOfDrawing)).attr('fill', d => colorScale(d.genderRatio)).attr('r', 5).on('mouseover', (e, d) => {\n      let string = d.name + '</br>' + 'Gun Deaths: ' + d.count + '</br>' + 'Difficulty Drawing: ' + d.easeOfDrawing;\n      props.ToolTip.moveTTipEvent(tTip, e);\n      tTip.html(string);\n    }).on('mousemove', e => {\n      props.ToolTip.moveTTipEvent(tTip, e);\n    }).on('mouseout', (e, d) => {\n      props.ToolTip.hideTTip(tTip);\n    });\n\n    //draw the line\n    svg.selectAll('.regressionLine').remove();\n    svg.append('path').attr('class', 'regressionLine').attr('d', d3.line().curve(d3.curveBasis)(regressionLine)).attr('stroke-width', 5).attr('stroke', 'black').attr('fill', 'none');\n\n    //change the title\n    const labelSize = margin / 2;\n    svg.selectAll('text').remove();\n    svg.append('text').attr('x', width / 2).attr('y', labelSize).attr('text-anchor', 'middle').attr('font-size', labelSize).attr('font-weight', 'bold').text('How Hard it Is To Draw Each State Vs Gun Deaths');\n\n    //change the disclaimer here\n    svg.append('text').attr('x', width - 20).attr('y', height / 3).attr('text-anchor', 'end').attr('font-size', 10).text(\"I'm just asking questions\");\n\n    //draw basic axes using the x and y scales\n    svg.selectAll('g').remove();\n    svg.append('g').attr('transform', `translate(0,${height - margin + 1})`).call(d3.axisBottom(xScale));\n    svg.append('g').attr('transform', `translate(${margin - 2},0)`).call(d3.axisLeft(yScale));\n  }, [props.data, svg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n//END of TODO #1.\n/////////////////////////////////////////////////////////////////////////\n\n//////////////////////\n_s(WhiteHatStats, \"WSxzHn2M6v/mpwTKCm+WLF/lrvI=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = WhiteHatStats;\nconst drawingDifficulty = {\n  'IL': 9,\n  'AL': 2,\n  'AK': 1,\n  'AR': 3,\n  'CA': 9.51,\n  'CO': 0,\n  'DE': 3.1,\n  'DC': 1.3,\n  'FL': 8.9,\n  'GA': 3.9,\n  'HI': 4.5,\n  'ID': 4,\n  'IN': 4.3,\n  'IA': 4.1,\n  'KS': 1.6,\n  'KY': 7,\n  'LA': 6.5,\n  'MN': 2.1,\n  'MO': 5.5,\n  'ME': 7.44,\n  'MD': 10,\n  'MA': 6.8,\n  'MI': 9.7,\n  'MN': 5.1,\n  'MS': 3.8,\n  'MT': 1.4,\n  'NE': 1.9,\n  'NV': .5,\n  'NH': 3.7,\n  'NJ': 9.1,\n  'NM': .2,\n  'NY': 8.7,\n  'NC': 8.5,\n  'ND': 2.3,\n  'OH': 5.8,\n  'OK': 6.05,\n  'OR': 4.7,\n  'PA': 4.01,\n  'RI': 8.4,\n  'SC': 7.1,\n  'SD': .9,\n  'TN': 3.333333,\n  'TX': 8.1,\n  'UT': 2.8,\n  'VT': 2.6,\n  'VA': 8.2,\n  'WA': 9.2,\n  'WV': 7.9,\n  'WY': 0\n};\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","WhiteHatStats","props","_s","d3Container","svg","height","width","tTip","margin","radius","undefined","data","states","plotData","state","push","count","ctx","document","getElementById","getContext","myChart","Chart","type","labels","Array","from","length","_","i","datasets","label","backgroundColor","borderColor","borderWidth","options","xScale","scaleLinear","domain","extent","d","easeOfDrawing","range","yScale","regressionLine","colorScale","scaleDiverging","selectAll","remove","enter","append","attr","genderRatio","on","e","string","name","ToolTip","moveTTipEvent","html","hideTTip","line","curve","curveBasis","labelSize","text","call","axisBottom","axisLeft","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","drawingDifficulty","$RefreshReg$"],"sources":["D:/Hossein/2024/Spring/CS529/HW01/CS529_HW01/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\r\nimport useSVGCanvas from './useSVGCanvas.js';\r\nimport * as d3 from 'd3';\r\n\r\n//change the code below to modify the bottom plot view\r\nexport default function WhiteHatStats(props){\r\n    //this is a generic component for plotting a d3 plot\r\n    const d3Container = useRef(null);\r\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\r\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\r\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\r\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\r\n\r\n    const margin = 50;\r\n    const radius = 10;\r\n\r\n\r\n    //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \r\n    //This other representation could be \r\n    ///////////////////////////////////////a histogram, a stacked bar chart, etc.\r\n    //this loop updates when the props.data changes or the window resizes\r\n    //we can edit it to also use props.brushedState if you want to use linking\r\n    useEffect(()=>{\r\n        //wait until the data loads\r\n        if(svg === undefined | props.data === undefined){ return }\r\n\r\n        //aggregate gun deaths by state\r\n        const data = props.data.states;\r\n        \r\n        //get data for each state\r\n                                    // const plotData = [];\r\n                                    // for(let state of data){\r\n                                    //     const dd = drawingDifficulty[state.abreviation];\r\n                                    //     let entry = {\r\n                                    //         'count': state.count,\r\n                                    //         'name': state.state,\r\n                                    //         'easeOfDrawing': dd === undefined? 5: dd,\r\n                                    //         'genderRatio': state.male_count/state.count,\r\n                                    //     }\r\n                                    //     plotData.push(entry)\r\n                                    // }\r\n/////////////////////////////////////////////////////\r\nconst plotData = [];\r\n    for (let state of data) {\r\n        plotData.push(state.count); // Assuming state.count represents some quantitative data\r\n    }\r\n\r\n    // Create a histogram using Chart.js\r\n    var ctx = document.getElementById('myChart').getContext('2d');\r\n    var myChart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n            labels: Array.from({ length: plotData.length }, (_, i) => i + 1), // Generate labels from 1 to n\r\n            datasets: [{\r\n                label: 'Frequency',\r\n                data: plotData,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n           \r\n        }\r\n    });\r\n/////////////////////////////////////////////////\r\n        //get transforms for each value into x and y coordinates\r\n        let xScale = d3.scaleLinear()\r\n            .domain(d3.extent(plotData,d=>d.easeOfDrawing))\r\n            .range([margin+radius,width-margin-radius]);\r\n        let yScale = d3.scaleLinear()\r\n            .domain(d3.extent(plotData,d=>d.count))\r\n            .range([height-margin-radius,margin+radius]);\r\n\r\n\r\n        //draw a line showing the mean values across the curve\r\n        //this probably isn't actually regression\r\n                            const regressionLine = [];\r\n                            //I remove these ten lines to remove middle line\r\n                            // for(let i = 0; i <= 10; i+= 1){\r\n                            //     let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\r\n                            //     let meanY = 0;\r\n                            //     if(pvals.length > 0){\r\n                            //         for(let entry of pvals){\r\n                            //             meanY += entry.count/pvals.length\r\n                            //         }\r\n                            //     }\r\n                            //     let point = [xScale(i),yScale(meanY)]\r\n                            //     regressionLine.push(point)\r\n                            // }\r\n                            \r\n        //scale color by gender ratio for no reason\r\n        let colorScale = d3.scaleDiverging()\r\n            .domain([0,.5,1])\r\n            .range(['red','green','yellow']);\r\n\r\n        //draw the circles for each state\r\n        svg.selectAll('.dot').remove();\r\n        svg.selectAll('.dot').data(plotData)\r\n            .enter().append('circle')\r\n            .attr('cy',d=> yScale(d.count))\r\n            .attr('cx',d=>xScale(d.easeOfDrawing))\r\n            .attr('fill',d=> colorScale(d.genderRatio))\r\n            .attr('r',5)\r\n            .on('mouseover',(e,d)=>{\r\n                let string = d.name + '</br>'\r\n                    + 'Gun Deaths: ' + d.count + '</br>'\r\n                    + 'Difficulty Drawing: ' + d.easeOfDrawing;\r\n                props.ToolTip.moveTTipEvent(tTip,e)\r\n                tTip.html(string)\r\n            }).on('mousemove',(e)=>{\r\n                props.ToolTip.moveTTipEvent(tTip,e);\r\n            }).on('mouseout',(e,d)=>{\r\n                props.ToolTip.hideTTip(tTip);\r\n            });\r\n           \r\n        //draw the line\r\n        svg.selectAll('.regressionLine').remove();\r\n        svg.append('path').attr('class','regressionLine')\r\n            .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\r\n            .attr('stroke-width',5)\r\n            .attr('stroke','black')\r\n            .attr('fill','none');\r\n\r\n        //change the title\r\n        const labelSize = margin/2;\r\n        svg.selectAll('text').remove();\r\n        svg.append('text')\r\n            .attr('x',width/2)\r\n            .attr('y',labelSize)\r\n            .attr('text-anchor','middle')\r\n            .attr('font-size',labelSize)\r\n            .attr('font-weight','bold')\r\n            .text('How Hard it Is To Draw Each State Vs Gun Deaths');\r\n\r\n        //change the disclaimer here\r\n        svg.append('text')\r\n            .attr('x',width-20)\r\n            .attr('y',height/3)\r\n            .attr('text-anchor','end')\r\n            .attr('font-size',10)\r\n            .text(\"I'm just asking questions\");\r\n\r\n        //draw basic axes using the x and y scales\r\n        svg.selectAll('g').remove()\r\n        svg.append('g')\r\n            .attr('transform',`translate(0,${height-margin+1})`)\r\n            .call(d3.axisBottom(xScale))\r\n\r\n        svg.append('g')\r\n            .attr('transform',`translate(${margin-2},0)`)\r\n            .call(d3.axisLeft(yScale))\r\n        \r\n    },[props.data,svg]);\r\n\r\n    return (\r\n        <div\r\n            className={\"d3-component\"}\r\n            style={{'height':'99%','width':'99%'}}\r\n            ref={d3Container}\r\n        ></div>\r\n    );\r\n}\r\n//END of TODO #1.\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////\r\n \r\nconst drawingDifficulty = {\r\n    'IL': 9,\r\n    'AL': 2,\r\n    'AK': 1,\r\n    'AR': 3,\r\n    'CA': 9.51,\r\n    'CO': 0,\r\n    'DE': 3.1,\r\n    'DC': 1.3,\r\n    'FL': 8.9,\r\n    'GA': 3.9,\r\n    'HI': 4.5,\r\n    'ID': 4,\r\n    'IN': 4.3,\r\n    'IA': 4.1,\r\n    'KS': 1.6,\r\n    'KY': 7,\r\n    'LA': 6.5,\r\n    'MN': 2.1,\r\n    'MO': 5.5,\r\n    'ME': 7.44,\r\n    'MD': 10,\r\n    'MA': 6.8,\r\n    'MI': 9.7,\r\n    'MN': 5.1,\r\n    'MS': 3.8,\r\n    'MT': 1.4,\r\n    'NE': 1.9,\r\n    'NV': .5,\r\n    'NH': 3.7,\r\n    'NJ': 9.1,\r\n    'NM': .2,\r\n    'NY': 8.7,\r\n    'NC': 8.5,\r\n    'ND': 2.3,\r\n    'OH': 5.8,\r\n    'OK': 6.05,\r\n    'OR': 4.7,\r\n    'PA': 4.01,\r\n    'RI': 8.4,\r\n    'SC': 7.1,\r\n    'SD': .9,\r\n    'TN': 3.333333,\r\n    'TX': 8.1,\r\n    'UT': 2.8,\r\n    'VT': 2.6,\r\n    'VA': 8.2,\r\n    'WA': 9.2,\r\n    'WV': 7.9,\r\n    'WY': 0,\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}