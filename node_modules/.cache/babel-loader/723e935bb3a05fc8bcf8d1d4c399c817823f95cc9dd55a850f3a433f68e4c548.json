{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hossein\\\\2024\\\\Spring\\\\CS529\\\\HW01\\\\CS529_HW01\\\\src\\\\WhiteHatStats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  const margin = 50;\n  const radius = 10;\n\n  //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \n  //This other representation could be \n  ///////////////////////////////////////a histogram, a stacked bar chart, etc.\n  //this loop updates when the props.data changes or the window resizes\n  //we can edit it to also use props.brushedState if you want to use linking\n  useEffect(() => {\n    //wait until the data loads\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n\n    //aggregate gun deaths by state\n    const data = props.data.states;\n    ///\n\n    ///\n    //// help Andrew to find data count and data abreviation\n    const xscale = d3.scaleBand().domain(d3.groupSort(data, ([d], i) => -d.count, d => d.abreviation)).range([margin, width - margin]).padding(.1);\n    console.log('xscale', xscale(data[0].abreviation));\n\n    // declear the y( vertical position) scale\n\n    const yscale = d3.scaleLinear().domain([0, d3.max(data, d => d.count)]).range([height - margin, margin]);\n\n    //get data for each state\n    const plotData = [];\n    var currX = margin;\n    const barSpacing = 4;\n    var barWidth = (width - 2 * margin) / data.length - barSpacing;\n    for (let state of data) {\n      const dd = drawingDifficulty[state.abreviation];\n      let entry = {\n        'count': state.count,\n        'name': state.state,\n        'easeOfDrawing': dd === undefined ? 5 : dd,\n        'genderRatio': state.male_count / state.count,\n        'x': currX\n      };\n      currX += barWidth + barSpacing;\n      plotData.push(entry);\n    }\n    /////////////////////////////////////////////////////\n    //get transforms for each value into x and y coordinates\n    let xScale = d3.scaleLinear().domain(d3.extent(plotData, d => d.easeOfDrawing)).range([margin + radius, width - margin - radius]);\n    let yScale = d3.scaleLinear().domain(d3.extent(plotData, d => d.count)).range([height - margin - radius, margin + radius]);\n\n    //draw a line showing the mean values across the curve\n    //this probably isn't actually regression\n    // const regressionLine = [];\n    //I remove these ten lines to remove middle line\n    // for(let i = 0; i <= 10; i+= 1){\n    //     let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //     let meanY = 0;\n    //     if(pvals.length > 0){\n    //         for(let entry of pvals){\n    //             meanY += entry.count/pvals.length\n    //         }\n    //     }\n    //     let point = [xScale(i),yScale(meanY)]\n    //     regressionLine.push(point)\n    // }\n\n    //scale color by gender ratio for no reason\n    let colorScale = d3.scaleDiverging().domain([0, .5, 1]).range(['red', 'green', 'yellow']);\n\n    //draw the circles for each state\n    svg.selectAll('.dot').remove();\n    svg.selectAll('.dot').data(plotData).enter().append('circle').attr('cy', d => yScale(d.count))\n    ///\\\\ add abreviation\n    .attr('cx', d => xScale(d.abreviation)).attr('fill', d => colorScale(d.genderRatio)).attr('r', 5).on('mouseover', (e, d) => {\n      let string = d.name + '</br>' + 'Gun Deaths: ' + d.count + '</br>' + 'Difficulty Drawing: ' + d.easeOfDrawing;\n      props.ToolTip.moveTTipEvent(tTip, e);\n      tTip.html(string);\n    }).on('mousemove', e => {\n      props.ToolTip.moveTTipEvent(tTip, e);\n    }).on('mouseout', (e, d) => {\n      props.ToolTip.hideTTip(tTip);\n    });\n\n    //draw the line\n    // svg.selectAll('.regressionLine').remove();\n    // svg.append('path').attr('class','regressionLine')\n    //     .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n    //     .attr('stroke-width',5)\n    //     .attr('stroke','black')\n    //     .attr('fill','none');\n\n    //change the title\n    const labelSize = margin / 2;\n    svg.selectAll('text').remove();\n    svg.append('text').attr('x', width / 2).attr('y', labelSize).attr('text-anchor', 'middle').attr('font-size', labelSize).attr('font-weight', 'bold').text('How Hard it Is To Draw Each State Vs Gun Deaths');\n\n    //change the disclaimer here\n    svg.append('text').attr('x', width - 20).attr('y', height / 3).attr('text-anchor', 'end').attr('font-size', 10).text(\"I'm just asking questions\");\n\n    //draw basic axes using the x and y scales\n    svg.selectAll('g').remove();\n    svg.append('g').attr('transform', `translate(0,${height - margin + 1})`).call(d3.axisBottom(xScale));\n    svg.append('g').attr('transform', `translate(${margin - 2},0)`).call(d3.axisLeft(yScale));\n  }, [props.data, svg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 29\n  }, this);\n}\n//END of TODO #1.\n/////////////////////////////////////////////////////////////////////////\n\n//////////////////////\n_s(WhiteHatStats, \"WSxzHn2M6v/mpwTKCm+WLF/lrvI=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = WhiteHatStats;\nconst drawingDifficulty = {\n  'IL': 9,\n  'AL': 2,\n  'AK': 1,\n  'AR': 3,\n  'CA': 9.51,\n  'CO': 0,\n  'DE': 3.1,\n  'DC': 1.3,\n  'FL': 8.9,\n  'GA': 3.9,\n  'HI': 4.5,\n  'ID': 4,\n  'IN': 4.3,\n  'IA': 4.1,\n  'KS': 1.6,\n  'KY': 7,\n  'LA': 6.5,\n  'MN': 2.1,\n  'MO': 5.5,\n  'ME': 7.44,\n  'MD': 10,\n  'MA': 6.8,\n  'MI': 9.7,\n  'MN': 5.1,\n  'MS': 3.8,\n  'MT': 1.4,\n  'NE': 1.9,\n  'NV': .5,\n  'NH': 3.7,\n  'NJ': 9.1,\n  'NM': .2,\n  'NY': 8.7,\n  'NC': 8.5,\n  'ND': 2.3,\n  'OH': 5.8,\n  'OK': 6.05,\n  'OR': 4.7,\n  'PA': 4.01,\n  'RI': 8.4,\n  'SC': 7.1,\n  'SD': .9,\n  'TN': 3.333333,\n  'TX': 8.1,\n  'UT': 2.8,\n  'VT': 2.6,\n  'VA': 8.2,\n  'WA': 9.2,\n  'WV': 7.9,\n  'WY': 0\n};\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","WhiteHatStats","props","_s","d3Container","svg","height","width","tTip","margin","radius","undefined","data","states","xscale","scaleBand","domain","groupSort","d","i","count","abreviation","range","padding","console","log","yscale","scaleLinear","max","plotData","currX","barSpacing","barWidth","length","state","dd","drawingDifficulty","entry","male_count","push","xScale","extent","easeOfDrawing","yScale","colorScale","scaleDiverging","selectAll","remove","enter","append","attr","genderRatio","on","e","string","name","ToolTip","moveTTipEvent","html","hideTTip","labelSize","text","call","axisBottom","axisLeft","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Hossein/2024/Spring/CS529/HW01/CS529_HW01/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\r\nimport useSVGCanvas from './useSVGCanvas.js';\r\nimport * as d3 from 'd3';\r\n\r\n//change the code below to modify the bottom plot view\r\nexport default function WhiteHatStats(props){\r\n    //this is a generic component for plotting a d3 plot\r\n    const d3Container = useRef(null);\r\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\r\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\r\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\r\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\r\n\r\n    const margin = 50;\r\n    const radius = 10;\r\n\r\n\r\n    //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \r\n    //This other representation could be \r\n    ///////////////////////////////////////a histogram, a stacked bar chart, etc.\r\n    //this loop updates when the props.data changes or the window resizes\r\n    //we can edit it to also use props.brushedState if you want to use linking\r\n    useEffect(()=>{\r\n        //wait until the data loads\r\n        if(svg === undefined | props.data === undefined){ return }\r\n\r\n        //aggregate gun deaths by state\r\n        const data = props.data.states;\r\n        ///\r\n        \r\n\r\n        ///\r\n//// help Andrew to find data count and data abreviation\r\n        const xscale = d3.scaleBand()\r\n            .domain(d3.groupSort(data, ([d],i) => -d.count, (d) => d.abreviation))\r\n            .range([margin, width - margin])\r\n            .padding(.1);\r\n        console.log('xscale',xscale(data[0].abreviation))\r\n\r\n        // declear the y( vertical position) scale\r\n\r\n        const yscale=d3.scaleLinear()\r\n        .domain([0,d3.max(data, (d)=>d.count)])\r\n        .range([height-margin,margin]);\r\n\r\n        //get data for each state\r\n        const plotData = [];\r\n        var currX = margin;\r\n        const barSpacing =4;\r\n        var barWidth = ((width - 2*margin)/(data.length)) - barSpacing; \r\n        for(let state of data){\r\n            const dd = drawingDifficulty[state.abreviation];\r\n            let entry = {\r\n                'count': state.count,\r\n                'name': state.state,\r\n                'easeOfDrawing': dd === undefined? 5: dd,\r\n                'genderRatio': state.male_count/state.count,\r\n                'x': currX,\r\n            }\r\n            currX += barWidth + barSpacing;\r\n            plotData.push(entry)\r\n        }\r\n                    /////////////////////////////////////////////////////\r\n                            //get transforms for each value into x and y coordinates\r\n                            let xScale = d3.scaleLinear()\r\n                                .domain(d3.extent(plotData,d=>d.easeOfDrawing))\r\n                                .range([margin+radius,width-margin-radius]);\r\n                            let yScale = d3.scaleLinear()\r\n                                .domain(d3.extent(plotData,d=>d.count))\r\n                                .range([height-margin-radius,margin+radius]);\r\n\r\n\r\n                            //draw a line showing the mean values across the curve\r\n                            //this probably isn't actually regression\r\n                                            // const regressionLine = [];\r\n                                                //I remove these ten lines to remove middle line\r\n                                                // for(let i = 0; i <= 10; i+= 1){\r\n                                                //     let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\r\n                                                //     let meanY = 0;\r\n                                                //     if(pvals.length > 0){\r\n                                                //         for(let entry of pvals){\r\n                                                //             meanY += entry.count/pvals.length\r\n                                                //         }\r\n                                                //     }\r\n                                                //     let point = [xScale(i),yScale(meanY)]\r\n                                                //     regressionLine.push(point)\r\n                                                // }\r\n                                                \r\n                            //scale color by gender ratio for no reason\r\n                            let colorScale = d3.scaleDiverging()\r\n                                .domain([0,.5,1])\r\n                                .range(['red','green','yellow']);\r\n\r\n                            //draw the circles for each state\r\n                            svg.selectAll('.dot').remove();\r\n                            svg.selectAll('.dot').data(plotData)\r\n                                .enter().append('circle')\r\n                                .attr('cy',d=> yScale(d.count))\r\n                                ///\\\\ add abreviation\r\n                                .attr('cx',d=>xScale(d.abreviation))\r\n                                .attr('fill',d=> colorScale(d.genderRatio))\r\n                                .attr('r',5)\r\n                                .on('mouseover',(e,d)=>{\r\n                                    let string = d.name + '</br>'\r\n                                        + 'Gun Deaths: ' + d.count + '</br>'\r\n                                        + 'Difficulty Drawing: ' + d.easeOfDrawing;\r\n                                    props.ToolTip.moveTTipEvent(tTip,e)\r\n                                    tTip.html(string)\r\n                                }).on('mousemove',(e)=>{\r\n                                    props.ToolTip.moveTTipEvent(tTip,e);\r\n                                }).on('mouseout',(e,d)=>{\r\n                                    props.ToolTip.hideTTip(tTip);\r\n                                });\r\n                            \r\n                            //draw the line\r\n                                            // svg.selectAll('.regressionLine').remove();\r\n                                            // svg.append('path').attr('class','regressionLine')\r\n                                            //     .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\r\n                                            //     .attr('stroke-width',5)\r\n                                            //     .attr('stroke','black')\r\n                                            //     .attr('fill','none');\r\n\r\n                            //change the title\r\n                            const labelSize = margin/2;\r\n                            svg.selectAll('text').remove();\r\n                            svg.append('text')\r\n                                .attr('x',width/2)\r\n                                .attr('y',labelSize)\r\n                                .attr('text-anchor','middle')\r\n                                .attr('font-size',labelSize)\r\n                                .attr('font-weight','bold')\r\n                                .text('How Hard it Is To Draw Each State Vs Gun Deaths');\r\n\r\n                            //change the disclaimer here\r\n                            svg.append('text')\r\n                                .attr('x',width-20)\r\n                                .attr('y',height/3)\r\n                                .attr('text-anchor','end')\r\n                                .attr('font-size',10)\r\n                                .text(\"I'm just asking questions\");\r\n\r\n                            //draw basic axes using the x and y scales\r\n                            svg.selectAll('g').remove()\r\n                            svg.append('g')\r\n                                .attr('transform',`translate(0,${height-margin+1})`)\r\n                                .call(d3.axisBottom(xScale))\r\n\r\n                            svg.append('g')\r\n                                .attr('transform',`translate(${margin-2},0)`)\r\n                                .call(d3.axisLeft(yScale))\r\n                            \r\n                        },[props.data,svg]);\r\n\r\n                        return (\r\n                            <div\r\n                                className={\"d3-component\"}\r\n                                style={{'height':'99%','width':'99%'}}\r\n                                ref={d3Container}\r\n                            ></div>\r\n                        );\r\n                    }\r\n                    //END of TODO #1.\r\n                    /////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////\r\n \r\nconst drawingDifficulty = {\r\n    'IL': 9,\r\n    'AL': 2,\r\n    'AK': 1,\r\n    'AR': 3,\r\n    'CA': 9.51,\r\n    'CO': 0,\r\n    'DE': 3.1,\r\n    'DC': 1.3,\r\n    'FL': 8.9,\r\n    'GA': 3.9,\r\n    'HI': 4.5,\r\n    'ID': 4,\r\n    'IN': 4.3,\r\n    'IA': 4.1,\r\n    'KS': 1.6,\r\n    'KY': 7,\r\n    'LA': 6.5,\r\n    'MN': 2.1,\r\n    'MO': 5.5,\r\n    'ME': 7.44,\r\n    'MD': 10,\r\n    'MA': 6.8,\r\n    'MI': 9.7,\r\n    'MN': 5.1,\r\n    'MS': 3.8,\r\n    'MT': 1.4,\r\n    'NE': 1.9,\r\n    'NV': .5,\r\n    'NH': 3.7,\r\n    'NJ': 9.1,\r\n    'NM': .2,\r\n    'NY': 8.7,\r\n    'NC': 8.5,\r\n    'ND': 2.3,\r\n    'OH': 5.8,\r\n    'OK': 6.05,\r\n    'OR': 4.7,\r\n    'PA': 4.01,\r\n    'RI': 8.4,\r\n    'SC': 7.1,\r\n    'SD': .9,\r\n    'TN': 3.333333,\r\n    'TX': 8.1,\r\n    'UT': 2.8,\r\n    'VT': 2.6,\r\n    'VA': 8.2,\r\n    'WA': 9.2,\r\n    'WV': 7.9,\r\n    'WY': 0,\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}