{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hossein\\\\2024\\\\Spring\\\\CS529\\\\HW01\\\\CS529_HW01\\\\src\\\\Whitehat.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo, useState } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\nimport * as plot from \"https://cdn.jsdeliver.net/npm/@observablehq/plot@0.6/+esm\";\nimport { scaleSequential } from 'd3-scale';\nimport { interpolateViridis } from 'd3-scale-chromatic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Whitehat(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n\n  //male,female,both\n  const [mapVariable, setMapVariable] = useState('both');\n\n  //\\\\change false to true to active zoom in state and map\n  var isZoomed = false;\n\n  //TODO: change the line below to change the size of the white-hat maximum bubble size\n  // \\\\for example I change it from 100 t0 120 for smaller circle \\\\\n  const maxRadius = width / 120;\n\n  //albers usa projection puts alaska in the corner\n  //this automatically convert latitude and longitude to coordinates on the svg canvas//\n  const projection = d3.geoAlbersUsa().translate([width / 2, height / 2]);\n\n  //set up the path generator to draw the states\n  const geoGenerator = d3.geoPath().projection(projection);\n\n  //we need to use this function to convert state names into ids so we can select individual states by name using javascript selectors\n  //since spaces makes it not work correctly\n  function cleanString(string) {\n    return string.replace(' ', '_').replace(' ', '_');\n  }\n\n  //This is the main loop that renders the code once the data loads\n  //TODO: edit or replace this code to create your white-hat version of the map view; for example, change the color map based on colorbrewer2, \n  // I will change : const colorMap = d3.interpolateBlues;\n  //1-\n  const mapGroupSelection = useMemo(() => {\n    //wait until the svg is rendered and data is loaded\n    if (svg !== undefined & props.map !== undefined & props.data !== undefined) {\n      let populationState = '';\n      const stateData = [...props.data.states];\n      // console.log(stateData)\n      //EDIT THIS TO CHANGE WHAT IS USED TO ENCODE COLOR\n      //\\\\ change code for male and female\n      var getEncodedFeature = d => d.count;\n      if (mapVariable === 'male') {\n        getEncodedFeature = d => d.male_count;\n      }\n      if (mapVariable === 'female') {\n        getEncodedFeature = d => d.count - d.male_count;\n      }\n      //this section of code sets up the colormap\n      const stateCounts = Object.values(stateData).map(getEncodedFeature);\n\n      //get color extends for the color legend\n      const [stateMin, stateMax] = d3.extent(stateCounts);\n      console.log('states', stateData);\n      //color map scale, scales numbers to a smaller range to use with a d3 color scale\n      //we're using 1-0 to invert the red-yellow-green color scale\n      //so red is bad (p.s. this is not a good color scheme still)\n      // I change the color range from [0,1] to [0.5,1] red=0 and yellow is 0.5 and 1 is green\n      // another way is using ===>>> const colorMap = d3.interpolateHslLong(\"green\", \"blue\");\n      const stateScale = d3.scaleLinear().domain([stateMin, stateMax]).range([0, 1]);\n\n      //TODO: EDIT HERE TO CHANGE THE COLOR SCHEME\n      //this function takes a number 0-1 and returns a color\n\n      const colorMap = d3.interpolateBlues;\n      ///         const colorMap = d3.interpolateHslLong( \"blue\");\n      //this set of functions extracts the features given the state name from the geojson\n      function getCount(name) {\n        //map uses full name, dataset uses abreviations\n        name = cleanString(name);\n        let entry = stateData.filter(d => d.state === name);\n        if (entry === undefined | entry.length < 1) {\n          return 0;\n        }\n        return getEncodedFeature(entry[0]);\n      }\n      const getOtherValue = d => d.male_count / d.count;\n      function getGenderRatio(name) {\n        //map uses full name, dataset uses abreviations\n        name = cleanString(name);\n        let entry = stateData.filter(d => d.state === name);\n        if (entry === undefined | entry.length < 1) {\n          return 0;\n        }\n        populationState = entry[0].population;\n        return getOtherValue(entry[0]);\n      }\n      function getStateVal(name) {\n        let count = getCount(name);\n        let val = stateScale(count);\n        return val;\n      }\n      function getStateColor(d) {\n        return colorMap(getStateVal(d.properties.NAME));\n      }\n      // let populationState = '';\n\n      // populationState = entry[0].population;\n      // return getEncodedFeature(entry[0]);\n      //clear earlier drawings\n      svg.selectAll('g').remove();\n\n      //OPTIONAL: EDIT THIS TO CHANGE THE DETAILS OF HOW THE MAP IS DRAWN\n      //draw borders from map and add tooltip\n\n      let mapGroup = svg.append('g').attr('class', 'mapbox');\n      mapGroup.selectAll('path').filter('.state').data(props.map.features).enter().append('path').attr('class', 'state')\n      //ID is useful if you want to do brushing as it gives you a way to select the path\n      .attr('id', d => cleanString(d.properties.NAME)).attr('d', geoGenerator).attr('fill', getStateColor).attr('stroke', 'black')\n      //\\\\increase border width from .1 to .5\n      .attr('stroke-width', 0.5).on('mouseover', (e, d) => {\n        let state = cleanString(d.properties.NAME);\n        //this updates the brushed state\n        if (props.brushedState !== state) {\n          props.setBrushedState(state);\n        }\n        let sname = d.properties.NAME;\n        let count = getCount(sname);\n        let genderRatio = getGenderRatio(sname);\n        // let num= \n        //\\\\\\var index = stateData.findIndex(p => p.state == sname.replace(\" \", \"_\"));\n        let text = sname + '</br>' + 'Gun Deaths: ' + count + '</br>'\n        //\\\\ I should think about state population\n        + 'Death per Million:' + count / parseInt(populationState, 10) * 1000000 ////stateData[1].population\n        //(stateData[index].count)/parseInt((stateData[index].population))*1000000;\n        + '</br>Gender Deaths:' + genderRatio;\n        tTip.html(text);\n      }).on('mousemove', e => {\n        //see app.js for the helper function that makes this easier\n        props.ToolTip.moveTTipEvent(tTip, e);\n      }).on('mouseout', (e, d) => {\n        props.setBrushedState();\n        props.ToolTip.hideTTip(tTip);\n      });\n\n      //TODO: replace or edit the code below to change the city marker being used.\n      // Hint: \n      //think of the cityScale range (perhaps use area rather than radius). \n      //draw markers for each city\n      const cityData = props.data.cities;\n      const cityMax = d3.max(cityData.map(d => d.count));\n      const cityScale = d3.scaleLinear().domain([0, cityMax]).range([0, maxRadius]);\n      mapGroup.selectAll('.city').remove();\n\n      //TODO: Add code for a tooltip when you mouse over the city (hint: use the same code for the state tooltip events .on... and modify what is used for the tTip.html)\n      //OPTIONAL: change the color or opacity\n      const cityColorScale = d3.scaleSequential(interpolatevirdis);\n      mapGroup.selectAll('.city').data(cityData).enter().append('circle').attr('class', 'city').attr('id', d => d.key).attr('cx', d => projection([d.lng, d.lat])[0]).attr('cy', d => projection([d.lng, d.lat])[1]).attr('r', d => cityScale(d.count)).attr('opacity', .5);\n\n      //draw a color legend, automatically scaled based on data extents\n      function drawLegend() {\n        let bounds = mapGroup.node().getBBox();\n        const barHeight = Math.min(height / 10, 40);\n        let legendX = bounds.x + 10 + bounds.width;\n        const barWidth = Math.min((width - legendX) / 3, 40);\n        const fontHeight = Math.min(barWidth / 2, 16);\n        let legendY = bounds.y + 2 * fontHeight;\n        let colorLData = [];\n        //OPTIONAL: EDIT THE VALUES IN THE ARRAY TO CHANGE THE NUMBER OF ITEMS IN THE COLOR LEGEND\n        for (let ratio of [0.1, .2, .3, .4, .5, .6, .7, .8, .9, .99]) {\n          let val = (1 - ratio) * stateMin + ratio * stateMax;\n          let scaledVal = stateScale(val);\n          let color = colorMap(scaledVal);\n          let entry = {\n            'x': legendX,\n            'y': legendY,\n            'value': val,\n            'color': color\n          };\n          entry.text = entry.value.toFixed(0);\n          colorLData.push(entry);\n          legendY += barHeight;\n        }\n        svg.selectAll('.legendRect').remove();\n        svg.selectAll('.legendRect').data(colorLData).enter().append('rect').attr('class', 'legendRect').attr('x', d => d.x).attr('y', d => d.y).attr('fill', d => d.color).attr('height', barHeight).attr('width', barWidth);\n        svg.selectAll('.legendText').remove();\n        const legendTitle = {\n          'x': legendX - barWidth,\n          'y': bounds.y,\n          'text': 'Gun Deaths'\n        };\n        svg.selectAll('.legendText').data([legendTitle].concat(colorLData)).enter().append('text').attr('class', 'legendText').attr('x', d => d.x + barWidth + 5).attr('y', d => d.y + barHeight / 2 + fontHeight / 4).attr('font-size', (d, i) => i == 0 ? 1.2 * fontHeight : fontHeight).text(d => d.text);\n      }\n      drawLegend();\n      return mapGroup;\n    }\n  }, [svg, props.map, props.data, mapVariable]);\n\n  //This adds zooming. Triggers whenever the function above finishes\n  //this section can be included in the main body but is here as an example \n  //of how to do multiple hooks so updates don't have to occur in every state\n  useMemo(() => {\n    if (mapGroupSelection === undefined) {\n      return;\n    }\n\n    //set up zooming\n    function zoomed(event) {\n      const {\n        transform\n      } = event;\n      mapGroupSelection.attr(\"transform\", transform).attr(\"stroke-width\", 1 / transform.k);\n    }\n    const zoom = d3.zoom().on(\"zoom\", zoomed);\n\n    //OPTIONAL: EDIT THIS CODE TO CHANGE WHAT HAPPENS WHEN YOU CLICK A STATE\n    //useful if you want to add brushing\n    function clicked(event, d) {\n      event.stopPropagation();\n      if (isZoomed) {\n        mapGroupSelection.transition().duration(300).call(zoom.transform, d3.zoomIdentity.translate(0, 0), d3.pointer(event, svg.node()));\n      } else {\n        //get bounds of path from map\n        const [[x0, y0], [x1, y1]] = geoGenerator.bounds(d);\n        //zoom to bounds\n        mapGroupSelection.transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(width / 2, height / 2).scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height))).translate(-(x0 + x1) / 2, -(y0 + y1) / 2), d3.pointer(event, svg.node()));\n      }\n      //sets the zoomed state property in the main app when we click on something\n      //if we are zoomed in, unzoom instead\n      isZoomed = !isZoomed;\n      if (isZoomed) {\n        props.setZoomedState(d.properties.NAME);\n      } else {\n        props.setZoomedState(undefined);\n      }\n    }\n    mapGroupSelection.selectAll('.state').attr('cursor', 'pointer') //so we know the states are clickable\n    .on('click', clicked);\n  }, [mapGroupSelection]);\n\n  //OPTIONAL: EDIT HERE TO CHANGE THE BRUSHING BEHAVIOUR IN THE MAP WHEN MOUSING OVER A STATE\n  //WILL UPDATE WHEN THE \"BRUSHEDSTATE\" VARIABLE CHANGES\n  //brush the state by altering it's opacity when the property changes\n  //brushed state can be on the same level but that makes it harder to use in linked views\n  //so its in the parent app to simplify the \"whitehat\" part which uses linked views.\n  useMemo(() => {\n    if (mapGroupSelection !== undefined) {\n      const isBrushed = props.brushedState !== undefined;\n      mapGroupSelection.selectAll('.state').attr('opacity', isBrushed ? .4 : .8).attr('strokeWidth', isBrushed ? 1 : 2);\n      if (isBrushed) {\n        mapGroupSelection.select('#' + props.brushedState).attr('opacity', 1).attr('strokeWidth', 3);\n      }\n    }\n  }, [mapGroupSelection, props.brushedState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 9\n  }, this);\n}\n_s(Whitehat, \"jVeeW0S4McOn5unE6L6eI8uoNXA=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = Whitehat;\nvar _c;\n$RefreshReg$(_c, \"Whitehat\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useSVGCanvas","d3","plot","scaleSequential","interpolateViridis","jsxDEV","_jsxDEV","Whitehat","props","_s","d3Container","svg","height","width","tTip","mapVariable","setMapVariable","isZoomed","maxRadius","projection","geoAlbersUsa","translate","geoGenerator","geoPath","cleanString","string","replace","mapGroupSelection","undefined","map","data","populationState","stateData","states","getEncodedFeature","d","count","male_count","stateCounts","Object","values","stateMin","stateMax","extent","console","log","stateScale","scaleLinear","domain","range","colorMap","interpolateBlues","getCount","name","entry","filter","state","length","getOtherValue","getGenderRatio","population","getStateVal","val","getStateColor","properties","NAME","selectAll","remove","mapGroup","append","attr","features","enter","on","e","brushedState","setBrushedState","sname","genderRatio","text","parseInt","html","ToolTip","moveTTipEvent","hideTTip","cityData","cities","cityMax","max","cityScale","cityColorScale","interpolatevirdis","key","lng","lat","drawLegend","bounds","node","getBBox","barHeight","Math","min","legendX","x","barWidth","fontHeight","legendY","y","colorLData","ratio","scaledVal","color","value","toFixed","push","legendTitle","concat","i","zoomed","event","transform","k","zoom","clicked","stopPropagation","transition","duration","call","zoomIdentity","pointer","x0","y0","x1","y1","scale","setZoomedState","isBrushed","select","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Hossein/2024/Spring/CS529/HW01/CS529_HW01/src/Whitehat.js"],"sourcesContent":["import React, {useRef,useMemo,useState} from 'react';\r\nimport useSVGCanvas from './useSVGCanvas.js';\r\nimport * as d3 from 'd3';\r\nimport * as plot from \"https://cdn.jsdeliver.net/npm/@observablehq/plot@0.6/+esm\"\r\nimport { scaleSequential } from 'd3-scale';\r\nimport { interpolateViridis } from 'd3-scale-chromatic';\r\n\r\nexport default function Whitehat(props){\r\n    //this is a generic component for plotting a d3 plot\r\n    const d3Container = useRef(null);\r\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\r\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\r\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\r\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\r\n\r\n    //male,female,both\r\n    const [mapVariable, setMapVariable] = useState('both');\r\n    \r\n    //\\\\change false to true to active zoom in state and map\r\n    var isZoomed = false;\r\n\r\n    //TODO: change the line below to change the size of the white-hat maximum bubble size\r\n    // \\\\for example I change it from 100 t0 120 for smaller circle \\\\\r\n    const maxRadius = width/120;\r\n\r\n    //albers usa projection puts alaska in the corner\r\n    //this automatically convert latitude and longitude to coordinates on the svg canvas//\r\n    const projection = d3.geoAlbersUsa()\r\n        .translate([width/2,height/2]);\r\n\r\n    //set up the path generator to draw the states\r\n    const geoGenerator = d3.geoPath().projection(projection);\r\n\r\n    //we need to use this function to convert state names into ids so we can select individual states by name using javascript selectors\r\n    //since spaces makes it not work correctly\r\n    function cleanString(string){\r\n        return string.replace(' ','_').replace(' ','_')\r\n    }\r\n\r\n\r\n    //This is the main loop that renders the code once the data loads\r\n    //TODO: edit or replace this code to create your white-hat version of the map view; for example, change the color map based on colorbrewer2, \r\n    // I will change : const colorMap = d3.interpolateBlues;\r\n    //1-\r\n    const mapGroupSelection = useMemo(()=>{\r\n        //wait until the svg is rendered and data is loaded\r\n        if(svg !== undefined & props.map !== undefined & props.data !== undefined){\r\n            let populationState='';\r\n            const stateData = [...props.data.states];\r\n            // console.log(stateData)\r\n            //EDIT THIS TO CHANGE WHAT IS USED TO ENCODE COLOR\r\n            //\\\\ change code for male and female\r\n            var getEncodedFeature = d => d.count\r\n            if(mapVariable === 'male'){\r\n                getEncodedFeature = d => d.male_count;\r\n            }\r\n            if(mapVariable === 'female'){\r\n                getEncodedFeature = d => d.count - d.male_count;\r\n            }\r\n            //this section of code sets up the colormap\r\n            const stateCounts = Object.values(stateData).map(getEncodedFeature);\r\n\r\n            //get color extends for the color legend\r\n            const [stateMin,stateMax] = d3.extent(stateCounts);\r\n            console.log('states',stateData)\r\n            //color map scale, scales numbers to a smaller range to use with a d3 color scale\r\n            //we're using 1-0 to invert the red-yellow-green color scale\r\n            //so red is bad (p.s. this is not a good color scheme still)\r\n            // I change the color range from [0,1] to [0.5,1] red=0 and yellow is 0.5 and 1 is green\r\n            // another way is using ===>>> const colorMap = d3.interpolateHslLong(\"green\", \"blue\");\r\n            const stateScale = d3.scaleLinear()\r\n                .domain([stateMin,stateMax])\r\n                .range([0,1]);\r\n\r\n            //TODO: EDIT HERE TO CHANGE THE COLOR SCHEME\r\n            //this function takes a number 0-1 and returns a color\r\n\r\n\r\n            const colorMap = d3.interpolateBlues;\r\n///         const colorMap = d3.interpolateHslLong( \"blue\");\r\n            //this set of functions extracts the features given the state name from the geojson\r\n            function getCount(name){\r\n                //map uses full name, dataset uses abreviations\r\n                name = cleanString(name);\r\n                let entry = stateData.filter(d=>d.state===name);\r\n                if(entry === undefined | entry.length < 1){\r\n                    return 0\r\n                }\r\n                return getEncodedFeature(entry[0]);\r\n            }\r\n\r\n            const getOtherValue = d => d.male_count/d.count;\r\n            function getGenderRatio(name){\r\n                //map uses full name, dataset uses abreviations\r\n                name = cleanString(name);\r\n                let entry = stateData.filter(d=>d.state===name);\r\n                if(entry === undefined | entry.length < 1){\r\n                    return 0\r\n                }\r\n                 populationState= entry[0].population;\r\n\r\n                return getOtherValue(entry[0]);\r\n            }\r\n            function getStateVal(name){\r\n                let count = getCount(name);\r\n                let val = stateScale(count);\r\n                return val\r\n            }\r\n\r\n            function getStateColor(d){\r\n                return colorMap(getStateVal(d.properties.NAME))\r\n            }\r\n            // let populationState = '';\r\n\r\n            // populationState = entry[0].population;\r\n            // return getEncodedFeature(entry[0]);\r\n            //clear earlier drawings\r\n            svg.selectAll('g').remove();\r\n\r\n            //OPTIONAL: EDIT THIS TO CHANGE THE DETAILS OF HOW THE MAP IS DRAWN\r\n            //draw borders from map and add tooltip\r\n            \r\n            \r\n            let mapGroup = svg.append('g').attr('class','mapbox');\r\n            mapGroup.selectAll('path').filter('.state')\r\n                .data(props.map.features).enter()\r\n                .append('path').attr('class','state')\r\n                //ID is useful if you want to do brushing as it gives you a way to select the path\r\n                .attr('id',d=> cleanString(d.properties.NAME))\r\n                .attr('d',geoGenerator)\r\n                .attr('fill',getStateColor)\r\n                .attr('stroke','black')\r\n                //\\\\increase border width from .1 to .5\r\n                .attr('stroke-width',0.5)\r\n                .on('mouseover',(e,d)=>{\r\n                    let state = cleanString(d.properties.NAME);\r\n                    //this updates the brushed state\r\n                    if(props.brushedState !== state){\r\n                        props.setBrushedState(state);\r\n                    }\r\n                    let sname = d.properties.NAME;\r\n                    let count = getCount(sname);\r\n                    let genderRatio = getGenderRatio(sname)\r\n                    // let num= \r\n                    //\\\\\\var index = stateData.findIndex(p => p.state == sname.replace(\" \", \"_\"));\r\n                    let text = sname + '</br>' \r\n                    + 'Gun Deaths: ' + count + '</br>'\r\n                    //\\\\ I should think about state population\r\n\r\n                    + 'Death per Million:'+(count/parseInt(populationState,10))*1000000////stateData[1].population\r\n                    //(stateData[index].count)/parseInt((stateData[index].population))*1000000;\r\n                    + '</br>Gender Deaths:' + genderRatio; \r\n                   \r\n                    tTip.html(text);\r\n                }).on('mousemove',(e)=>{\r\n                    //see app.js for the helper function that makes this easier\r\n                    props.ToolTip.moveTTipEvent(tTip,e);\r\n                }).on('mouseout',(e,d)=>{\r\n                    props.setBrushedState();\r\n                    props.ToolTip.hideTTip(tTip);\r\n                });\r\n\r\n\r\n            //TODO: replace or edit the code below to change the city marker being used.\r\n            // Hint: \r\n            //think of the cityScale range (perhaps use area rather than radius). \r\n            //draw markers for each city\r\n            const cityData = props.data.cities\r\n            const cityMax = d3.max(cityData.map(d=>d.count));\r\n            const cityScale = d3.scaleLinear()\r\n                .domain([0,cityMax])\r\n                .range([0,maxRadius]);\r\n\r\n            mapGroup.selectAll('.city').remove();\r\n           \r\n            //TODO: Add code for a tooltip when you mouse over the city (hint: use the same code for the state tooltip events .on... and modify what is used for the tTip.html)\r\n            //OPTIONAL: change the color or opacity\r\nconst cityColorScale=d3.scaleSequential(interpolatevirdis)\r\n\r\n            mapGroup.selectAll('.city')\r\n                .data(cityData).enter()\r\n                .append('circle').attr('class','city')\r\n                .attr('id',d=>d.key)\r\n                .attr('cx',d=> projection([d.lng,d.lat])[0])\r\n                .attr('cy',d=> projection([d.lng,d.lat])[1])\r\n                .attr('r',d=>cityScale(d.count))\r\n                .attr('opacity',.5);           \r\n\r\n            \r\n            //draw a color legend, automatically scaled based on data extents\r\n            function drawLegend(){\r\n                let bounds = mapGroup.node().getBBox();\r\n                const barHeight = Math.min(height/10,40);\r\n                \r\n                let legendX = bounds.x + 10 + bounds.width;\r\n                const barWidth = Math.min((width - legendX)/3,40);\r\n                const fontHeight = Math.min(barWidth/2,16);\r\n                let legendY = bounds.y + 2*fontHeight;\r\n                \r\n                let colorLData = [];\r\n                //OPTIONAL: EDIT THE VALUES IN THE ARRAY TO CHANGE THE NUMBER OF ITEMS IN THE COLOR LEGEND\r\n                for(let ratio of [0.1,.2,.3,.4,.5,.6,.7,.8,.9,.99]){\r\n                    let val = (1-ratio)*stateMin + ratio*stateMax;\r\n                    let scaledVal = stateScale(val);\r\n                    let color = colorMap(scaledVal);\r\n                    let entry = {\r\n                        'x': legendX,\r\n                        'y': legendY,\r\n                        'value': val,\r\n                        'color':color,\r\n                    }\r\n                    entry.text = (entry.value).toFixed(0);\r\n            \r\n                    colorLData.push(entry);\r\n                    legendY += barHeight;\r\n                }\r\n    \r\n                svg.selectAll('.legendRect').remove();\r\n                svg.selectAll('.legendRect')\r\n                    .data(colorLData).enter()\r\n                    .append('rect').attr('class','legendRect')\r\n                    .attr('x',d=>d.x)\r\n                    .attr('y',d=>d.y)\r\n                    .attr('fill',d=>d.color)\r\n                    .attr('height',barHeight)\r\n                    .attr('width',barWidth);\r\n    \r\n                svg.selectAll('.legendText').remove();\r\n                const legendTitle = {\r\n                    'x': legendX - barWidth,\r\n                    'y': bounds.y,\r\n                    'text': 'Gun Deaths' \r\n                }\r\n                svg.selectAll('.legendText')\r\n                    .data([legendTitle].concat(colorLData)).enter()\r\n                    .append('text').attr('class','legendText')\r\n                    .attr('x',d=>d.x+barWidth+5)\r\n                    .attr('y',d=>d.y+barHeight/2 + fontHeight/4)\r\n                    .attr('font-size',(d,i) => i == 0? 1.2*fontHeight:fontHeight)\r\n                    .text(d=>d.text);\r\n            }\r\n\r\n            drawLegend();\r\n            return mapGroup\r\n        }\r\n    },[svg,props.map,props.data,mapVariable])\r\n\r\n    //This adds zooming. Triggers whenever the function above finishes\r\n    //this section can be included in the main body but is here as an example \r\n    //of how to do multiple hooks so updates don't have to occur in every state\r\n    useMemo(()=>{\r\n        if(mapGroupSelection === undefined){ return }\r\n        \r\n        //set up zooming\r\n        function zoomed(event) {\r\n            const {transform} = event;\r\n            mapGroupSelection\r\n                .attr(\"transform\", transform)\r\n               .attr(\"stroke-width\", 1 / transform.k);\r\n        }\r\n\r\n        const zoom = d3.zoom()\r\n            .on(\"zoom\", zoomed);\r\n\r\n        //OPTIONAL: EDIT THIS CODE TO CHANGE WHAT HAPPENS WHEN YOU CLICK A STATE\r\n        //useful if you want to add brushing\r\n        function clicked(event, d) {\r\n            event.stopPropagation();\r\n            if(isZoomed){\r\n                mapGroupSelection.transition().duration(300).call(\r\n                    zoom.transform,\r\n                    d3.zoomIdentity.translate(0,0),\r\n                    d3.pointer(event,svg.node())\r\n                )\r\n                    \r\n            }\r\n            else{\r\n                //get bounds of path from map\r\n                const [[x0, y0], [x1, y1]] = geoGenerator.bounds(d);\r\n                //zoom to bounds\r\n                mapGroupSelection.transition().duration(750).call(\r\n                    zoom.transform,\r\n                    d3.zoomIdentity\r\n                    .translate(width / 2, height / 2)\r\n                    .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))\r\n                    .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\r\n                    d3.pointer(event, svg.node())\r\n                );\r\n            }\r\n            //sets the zoomed state property in the main app when we click on something\r\n            //if we are zoomed in, unzoom instead\r\n            isZoomed = !isZoomed;\r\n            if(isZoomed){\r\n                props.setZoomedState(d.properties.NAME);\r\n            } else{\r\n                props.setZoomedState(undefined);\r\n            }\r\n        }\r\n        \r\n\r\n        mapGroupSelection.selectAll('.state')\r\n            .attr('cursor','pointer')//so we know the states are clickable\r\n            .on('click',clicked);\r\n\r\n    },[mapGroupSelection]);\r\n\r\n    //OPTIONAL: EDIT HERE TO CHANGE THE BRUSHING BEHAVIOUR IN THE MAP WHEN MOUSING OVER A STATE\r\n    //WILL UPDATE WHEN THE \"BRUSHEDSTATE\" VARIABLE CHANGES\r\n    //brush the state by altering it's opacity when the property changes\r\n    //brushed state can be on the same level but that makes it harder to use in linked views\r\n    //so its in the parent app to simplify the \"whitehat\" part which uses linked views.\r\n    useMemo(()=>{\r\n        if(mapGroupSelection !== undefined){\r\n            const isBrushed = props.brushedState !== undefined;\r\n            mapGroupSelection.selectAll('.state')\r\n                .attr('opacity',isBrushed? .4:.8)\r\n                .attr('strokeWidth',isBrushed? 1:2);\r\n            if(isBrushed){\r\n                mapGroupSelection.select('#'+props.brushedState)\r\n                    .attr('opacity',1)\r\n                    .attr('strokeWidth',3);\r\n            }\r\n        }\r\n    },[mapGroupSelection,props.brushedState]);\r\n    \r\n    return (\r\n        <div\r\n            className={\"d3-component\"}\r\n            style={{'height':'99%','width':'99%'}}\r\n            ref={d3Container}\r\n        ></div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}