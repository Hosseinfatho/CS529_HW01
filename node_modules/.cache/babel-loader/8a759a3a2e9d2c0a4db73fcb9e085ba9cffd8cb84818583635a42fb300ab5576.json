{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hossein\\\\2024\\\\Spring\\\\CS529\\\\HW01\\\\CS529_HW01\\\\src\\\\WhiteHatStats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  const margin = 50;\n  const radius = 10;\n\n  //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \n  //This other representation could be \n  ///////////////////////////////////////a histogram, a stacked bar chart, etc.\n  //this loop updates when the props.data changes or the window resizes\n  //we can edit it to also use props.brushedState if you want to use linking\n  useEffect(() => {\n    //wait until the data loads\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n\n    //aggregate gun deaths by state\n    const data = props.data.states;\n    console.log(\"Final log\", data);\n\n    //draw here\n\n    //////////array[{population, abreviation, state, count, male_count,ids}]\n  }, [props.data, svg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n//END of TODO #1.\n/////////////////////////////////////////////////////////////////////////\n\n//////////////////////\n_s(WhiteHatStats, \"WSxzHn2M6v/mpwTKCm+WLF/lrvI=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = WhiteHatStats;\nconst drawingDifficulty = {\n  'IL': 9,\n  'AL': 2,\n  'AK': 1,\n  'AR': 3,\n  'CA': 9.51,\n  'CO': 0,\n  'DE': 3.1,\n  'DC': 1.3,\n  'FL': 8.9,\n  'GA': 3.9,\n  'HI': 4.5,\n  'ID': 4,\n  'IN': 4.3,\n  'IA': 4.1,\n  'KS': 1.6,\n  'KY': 7,\n  'LA': 6.5,\n  'MN': 2.1,\n  'MO': 5.5,\n  'ME': 7.44,\n  'MD': 10,\n  'MA': 6.8,\n  'MI': 9.7,\n  'MN': 5.1,\n  'MS': 3.8,\n  'MT': 1.4,\n  'NE': 1.9,\n  'NV': .5,\n  'NH': 3.7,\n  'NJ': 9.1,\n  'NM': .2,\n  'NY': 8.7,\n  'NC': 8.5,\n  'ND': 2.3,\n  'OH': 5.8,\n  'OK': 6.05,\n  'OR': 4.7,\n  'PA': 4.01,\n  'RI': 8.4,\n  'SC': 7.1,\n  'SD': .9,\n  'TN': 3.333333,\n  'TX': 8.1,\n  'UT': 2.8,\n  'VT': 2.6,\n  'VA': 8.2,\n  'WA': 9.2,\n  'WV': 7.9,\n  'WY': 0\n};\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","WhiteHatStats","props","_s","d3Container","svg","height","width","tTip","margin","radius","undefined","data","states","console","log","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","drawingDifficulty","$RefreshReg$"],"sources":["D:/Hossein/2024/Spring/CS529/HW01/CS529_HW01/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\r\nimport useSVGCanvas from './useSVGCanvas.js';\r\nimport * as d3 from 'd3';\r\n\r\n//change the code below to modify the bottom plot view\r\nexport default function WhiteHatStats(props){\r\n    //this is a generic component for plotting a d3 plot\r\n    const d3Container = useRef(null);\r\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\r\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\r\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\r\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\r\n\r\n    const margin = 50;\r\n    const radius = 10;\r\n\r\n\r\n    //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. \r\n    //This other representation could be \r\n    ///////////////////////////////////////a histogram, a stacked bar chart, etc.\r\n    //this loop updates when the props.data changes or the window resizes\r\n    //we can edit it to also use props.brushedState if you want to use linking\r\n    useEffect(()=>{\r\n        //wait until the data loads\r\n        if(svg === undefined | props.data === undefined){ return }\r\n\r\n        //aggregate gun deaths by state\r\n        const data = props.data.states;\r\n\r\n        console.log(\"Final log\", data);     \r\n        \r\n        \r\n        //draw here\r\n\r\n        //////////array[{population, abreviation, state, count, male_count,ids}]\r\n\r\n\r\n    },[props.data,svg]);\r\n\r\n    return (\r\n        <div\r\n            className={\"d3-component\"}\r\n            style={{'height':'99%','width':'99%'}}\r\n            ref={d3Container}\r\n        ></div>\r\n    );\r\n}\r\n//END of TODO #1.\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////\r\n \r\nconst drawingDifficulty = {\r\n    'IL': 9,\r\n    'AL': 2,\r\n    'AK': 1,\r\n    'AR': 3,\r\n    'CA': 9.51,\r\n    'CO': 0,\r\n    'DE': 3.1,\r\n    'DC': 1.3,\r\n    'FL': 8.9,\r\n    'GA': 3.9,\r\n    'HI': 4.5,\r\n    'ID': 4,\r\n    'IN': 4.3,\r\n    'IA': 4.1,\r\n    'KS': 1.6,\r\n    'KY': 7,\r\n    'LA': 6.5,\r\n    'MN': 2.1,\r\n    'MO': 5.5,\r\n    'ME': 7.44,\r\n    'MD': 10,\r\n    'MA': 6.8,\r\n    'MI': 9.7,\r\n    'MN': 5.1,\r\n    'MS': 3.8,\r\n    'MT': 1.4,\r\n    'NE': 1.9,\r\n    'NV': .5,\r\n    'NH': 3.7,\r\n    'NJ': 9.1,\r\n    'NM': .2,\r\n    'NY': 8.7,\r\n    'NC': 8.5,\r\n    'ND': 2.3,\r\n    'OH': 5.8,\r\n    'OK': 6.05,\r\n    'OR': 4.7,\r\n    'PA': 4.01,\r\n    'RI': 8.4,\r\n    'SC': 7.1,\r\n    'SD': .9,\r\n    'TN': 3.333333,\r\n    'TX': 8.1,\r\n    'UT': 2.8,\r\n    'VT': 2.6,\r\n    'VA': 8.2,\r\n    'WA': 9.2,\r\n    'WV': 7.9,\r\n    'WY': 0,\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}